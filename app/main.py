import asyncio
import logging
import os
from contextlib import asynccontextmanager

import uvicorn
from fastapi import FastAPI

from app.agent.server import run_mcp_server
from app.routes.agent_routes import agent_router
from app.routes.data_routes import data_router
from app.routes.utility_routes import utility_router
from app.services.http_client import AsyncHttpClient
from app.storage.tarantool import TarantoolClient

logger = logging.getLogger(__name__)


# =======================
# Lifespan: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
# =======================


@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    await AsyncHttpClient.get_instance()
    await TarantoolClient.get_instance()
    yield
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await TarantoolClient.close_global()
    await AsyncHttpClient.close_global()
    logger.info("‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI —Å lifespan
app = FastAPI(title="GigaChat MCP Server", lifespan=lifespan)

app.include_router(agent_router)
app.include_router(data_router)
app.include_router(utility_router)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """Main function to run both MCP server and FastAPI"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("notes", exist_ok=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    mcp_task = asyncio.create_task(run_mcp_server())

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(
        app, host="0.0.0.0", port=8000, log_level="info", reload=True
    )
    server = uvicorn.Server(config)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await asyncio.gather(server.serve(), mcp_task)


if __name__ == "__main__":
    asyncio.run(main())
