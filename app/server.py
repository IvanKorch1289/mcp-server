from typing import Dict, Any, List, TypedDict, Optional
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables import RunnableConfig
from langchain_gigachat.chat_models.gigachat import GigaChat
from langgraph.graph import StateGraph, END
from mcp.server import Server
from mcp.types import Tool, TextContent
import json
import re
from langchain.tools import StructuredTool

from app.settings import settings
from app.prompts import system_prompt_template
from app.tools import (
    count_files_in_directory,
    get_current_time,
    read_file_content,
    create_note,
    fetch_company_info
)
from app.models import (
    CountFilesInput,
    ReadFileInput,
    CreateNoteInput,
    FetchCompanyInfoInput,
)
from mcp.server.stdio import stdio_server

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP-—Å–µ—Ä–≤–µ—Ä–∞
mcp_server = Server("gigachat-mcp-server")

# =======================
# 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
# =======================

tools = [
    # –§–∞–π–ª–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    {
        "func": count_files_in_directory,
        "schema": CountFilesInput,
        "name": "count_files",
        "desc": "Count files and directories in a specified directory",
    },
    {
        "func": get_current_time,
        "schema": None,
        "name": "get_current_time",
        "desc": "Get current date and time",
    },
    {
        "func": read_file_content,
        "schema": ReadFileInput,
        "name": "read_file",
        "desc": "Read content of a file",
    },
    {
        "func": create_note,
        "schema": CreateNoteInput,
        "name": "create_note",
        "desc": "Create a text note with the given content",
    },
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    {
        "func": fetch_company_info,
        "schema": FetchCompanyInfoInput,
        "name": "fetch_company_info",
        "desc": "Get comprehensive company info from DaData and InfoSphere by INN",
    },
]


# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ LangChain StructuredTool
structured_tools = []
for tool in tools:
    if tool["schema"]:
        structured_tools.append(
            StructuredTool.from_function(
                func=tool["func"],
                name=tool["name"],
                description=tool["desc"],
                args_schema=tool["schema"],
            )
        )
    else:
        structured_tools.append(
            StructuredTool.from_function(
                func=tool["func"],
                name=tool["name"],
                description=tool["desc"],
            )
        )

# =======================
# 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
# =======================

llm = GigaChat(
    credentials=settings.giga_api_key,
    verify_ssl_certs=False
)

try:
    llm_with_tools = llm.bind_tools(structured_tools)
except Exception as e:
    print(f"Warning: could not bind tools, using raw LLM: {e}")
    llm_with_tools = llm

# =======================
# 3. –ü—Ä–æ–º–ø—Ç –∏ –∞–≥–µ–Ω—Ç
# =======================

prompt = ChatPromptTemplate.from_messages([
    ("system", system_prompt_template),
    MessagesPlaceholder(variable_name="chat_history"),
    ("human", "{input}"),
    MessagesPlaceholder(variable_name="agent_scratchpad"),
])

agent = prompt | llm_with_tools


# =======================
# 4. –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞
# =======================

class AgentState(TypedDict):
    input: str
    session_id: str
    session: Any  # SessionState from session.py
    response: Optional[str]
    tool_results: List[Dict[str, Any]]


# =======================
# 5. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =======================

def parse_tool_calls(response: str) -> List[tuple]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–ò–ù–°–¢–†–£–ú–ï–ù–¢:–∏–º—è –ü–ê–†–ê–ú–ï–¢–†–´:{...}"
    –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–º—è_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç JSON –∏ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.
    """
    if not response:
        return []

    patterns = [
        r'–ò–ù–°–¢–†–£–ú–ï–ù–¢:([a-zA-Z_][a-zA-Z0-9_]*)\s*–ü–ê–†–ê–ú–ï–¢–†–´:\s*(\{.*\})',
        r'TOOL:([a-zA-Z_][a-zA-Z0-9_]*)\s*PARAMS:\s*(\{.*\})',
    ]

    for pattern in patterns:
        matches = re.findall(pattern, response, re.DOTALL)
        if matches:
            result = []
            for tool_name, params_str in matches:
                try:
                    params_str = params_str.strip()
                    if params_str.endswith(','):
                        params_str = params_str[:-1]
                    params = json.loads(params_str)
                    result.append((tool_name, params))
                except json.JSONDecodeError:
                    result.append((tool_name, {}))
            return result
    return []


def update_session_history(session, role: str, content: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏."""
    session.history.append({
        "role": role,
        "content": content,
        "timestamp": session.last_accessed.isoformat(),
    })
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
    if len(session.history) > 20:
        session.history = session.history[-20:]


# =======================
# 6. –£–∑–ª—ã –≥—Ä–∞—Ñ–∞
# =======================

async def agent_node(state: AgentState) -> Dict[str, Any]:
    """
    –£–∑–µ–ª –∞–≥–µ–Ω—Ç–∞: –≤—ã–∑—ã–≤–∞–µ—Ç LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.
    –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
    """
    messages = state["session"].to_messages()
    try:
        response = await agent.ainvoke({
            "input": state["input"],
            "chat_history": messages,
            "agent_scratchpad": [],
        }, config=RunnableConfig())

        response_text = ""

        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: tool_calls
        if hasattr(response, 'tool_calls') and response.tool_calls:
            call = response.tool_calls[0]
            tool_name = call['name']
            tool_args = call.get('args', {})
            response_text = f"–ò–ù–°–¢–†–£–ú–ï–ù–¢:{tool_name} –ü–ê–†–ê–ú–ï–¢–†–´:{json.dumps(tool_args)}"

        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: function_call
        elif (hasattr(response, 'additional_kwargs') and
              response.additional_kwargs.get('function_call')):
            fc = response.additional_kwargs['function_call']
            tool_name = fc.get('name', '')
            try:
                tool_args = json.loads(fc.get('arguments', '{}'))
            except json.JSONDecodeError:
                tool_args = {}
            response_text = f"–ò–ù–°–¢–†–£–ú–ï–ù–¢:{tool_name} –ü–ê–†–ê–ú–ï–¢–†–´:{json.dumps(tool_args)}"

        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        elif hasattr(response, 'content') and response.content:
            response_text = response.content

        else:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å."

        return {"response": response_text}
    except Exception as e:
        return {"response": f"–û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {str(e)}"}


async def tool_node(state: AgentState) -> Dict[str, Any]:
    tool_calls = parse_tool_calls(state["response"])
    results = []

    for tool_name, tool_args in tool_calls:
        tool = next((t for t in structured_tools if t.name == tool_name), None)
        if not tool:
            error = {"error": f"Unknown tool: {tool_name}"}
            results.append({"tool": tool_name, "result": error})
            update_session_history(
                state["session"],
                "user",
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"
            )
            continue

        try:
            if tool_name == "get_current_time":
                result = await tool.func()
            else:
                result = await tool.func(**tool_args)

            results.append({"tool": tool_name, "result": result})

            # ‚úÖ –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ user, –Ω–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
            update_session_history(
                state["session"],
                "user",
                f"[–°–ò–°–¢–ï–ú–ê] fetch_company_info({tool_args.get('inn')}) –≤—ã–ø–æ–ª–Ω–µ–Ω:\n"
                f"{json.dumps(result, ensure_ascii=False, indent=2)}"
            )

        except Exception as e:
            error = {"error": str(e)}
            results.append({"tool": tool_name, "result": error})
            update_session_history(
                state["session"],
                "user",
                f"[–°–ò–°–¢–ï–ú–ê] –û—à–∏–±–∫–∞ –≤ {tool_name}: {str(e)}"
            )

    # üî• –°–±—Ä–∞—Å—ã–≤–∞–µ–º response, —á—Ç–æ–±—ã agent_node –≤—ã–∑–≤–∞–ª—Å—è —Å–Ω–æ–≤–∞
    return {
        "tool_results": results,
        "response": None
    }

# =======================
# 7. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
# =======================

workflow = StateGraph(AgentState)

workflow.add_node("agent", agent_node)
workflow.add_node("tools", tool_node)

workflow.set_entry_point("agent")


def should_use_tools(state: AgentState) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."""
    if not state.get("response"):
        # –ï—Å–ª–∏ –Ω–µ—Ç response ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –ø–æ—Å–ª–µ tool_node
        # ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ)
        return "end"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if parse_tool_calls(state["response"]):
        return "tools"

    # –ï—Å–ª–∏ response –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –≤—ã–∑–æ–≤–∞ ‚Äî —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    return "end"


workflow.add_conditional_edges(
    "agent",
    should_use_tools,
    {
        "tools": "tools",
        "agent": "agent",  # ‚Üê –ø–æ—Å–ª–µ tool_node —Å–Ω–æ–≤–∞ –≤ agent
        "end": END
    }
)

# –ü–æ—Å–ª–µ tool_node ‚Äî –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ agent
workflow.add_edge("tools", "agent")

app_graph = workflow.compile()


# =======================
# 8. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ MCP
# =======================

@mcp_server.list_tools()
async def list_tools() -> List[Tool]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    return [
        Tool(
            name=tool["name"],
            description=tool["desc"],
            inputSchema=(
                tool["schema"].model_json_schema() if tool["schema"] else {}
            ),
        )
        for tool in tools
    ]


@mcp_server.call_tool()
async def call_tool(name: str, arguments: Dict[str, Any]) -> List[TextContent]:
    """–í—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏."""
    tool = next((t for t in structured_tools if t.name == name), None)
    if not tool:
        return [TextContent(type="text", text=json.dumps({"error": f"Unknown tool: {name}"}, ensure_ascii=False))]

    try:
        if name == "get_current_time":
            result = await tool.func()
        else:
            result = await tool.func(**arguments)
        return [TextContent(type="text", text=json.dumps(result, ensure_ascii=False))]
    except Exception as e:
        return [TextContent(type="text", text=json.dumps({"error": str(e)}, ensure_ascii=False))]


# –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
async def run_mcp_server():
    """Run the MCP server over stdio"""
    async with stdio_server() as (read_stream, write_stream):
        await mcp_server.run(
            read_stream=read_stream,
            write_stream=write_stream,
            initialization_options=None,
        )
